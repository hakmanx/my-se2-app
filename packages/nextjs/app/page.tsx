"use client";

import React from "react";
import { useState, useMemo } from "react";
import { parseEther, formatEther } from "viem";
import { useAccount } from "wagmi";
import { useScaffoldReadContract, useScaffoldWriteContract } from "~~/hooks/scaffold-eth";

export default function Home() {
  const { address, isConnected } = useAccount();
  const [uri, setUri] = useState("http://localhost:3000/nft-demo.png");

  // —á–∏—Ç–∞–µ–º —Ü–µ–Ω—É –º–∏–Ω—Ç–∞ –∏ —Å—Ç–∞—Ç—É—Å –ø–∞—É–∑—ã
  const { data: mintPriceWei } = useScaffoldReadContract({
    contractName: "MyNFT",
    functionName: "mintPrice",
  });

  const { data: mintPaused } = useScaffoldReadContract({
    contractName: "MyNFT",
    functionName: "mintPaused",
  });

  const mintPriceEth = useMemo(
    () => (mintPriceWei ? formatEther(mintPriceWei as bigint) : "0"),
    [mintPriceWei]
  );

  // –∑–∞–ø–∏—Å—å –≤ –∫–æ–Ω—Ç—Ä–∞–∫—Ç
  const { writeContractAsync, isPending } = useScaffoldWriteContract("MyNFT");

  const onMint = async () => {
    if (!uri) return;
    // –æ—Ç–ø—Ä–∞–≤–ª—è–µ–º —Ä–æ–≤–Ω–æ mintPrice –∏–∑ –∫–æ–Ω—Ç—Ä–∞–∫—Ç–∞
    const value = (mintPriceWei as bigint) ?? parseEther("0.01");
    await writeContractAsync({
      functionName: "mint",
      args: [uri],
      value,
    });
  };

  const onPause = async (p: boolean) => {
    await writeContractAsync({
      functionName: "pauseMint",
      args: [p],
    });
  };

  const onSetPrice = async (ethStr: string) => {
    // –±—ã—Å—Ç—Ä—ã–π setters (–Ω–µ –æ–±—è–∑–∞—Ç–µ–ª—å–Ω–æ, –Ω–æ —É–¥–æ–±–Ω–æ)
    const wei = parseEther(ethStr);
    await writeContractAsync({
      functionName: "setMintPrice",
      args: [wei],
    });
  };

  return (
    <main className="flex min-h-screen flex-col items-center p-6">
      <h1 className="text-4xl font-bold mb-8 flex items-center gap-3">
        <span>üé®</span> MyNFT Showcase
      </h1>

      <div className="w-full max-w-2xl grid gap-6">
        {/* CARD: Mint */}
        <div className="rounded-2xl shadow p-5 bg-white/70">
          <div className="flex items-center justify-between mb-3">
            <h2 className="text-xl font-semibold">Mint NFT</h2>
            <div className="text-sm opacity-80">
              Price: <b>{mintPriceEth}</b> ETH {mintPaused ? <span className="text-red-600">‚Ä¢ paused</span> : null}
            </div>
          </div>

          <label className="text-sm block mb-1">Token URI</label>
          <input
            className="w-full rounded-xl border px-3 py-2 mb-4"
            placeholder="http://localhost:3000/nft-demo.png  –∏–ª–∏  ipfs://demo"
            value={uri}
            onChange={e => setUri(e.target.value)}
          />

          <button
            onClick={onMint}
            disabled={!isConnected || isPending || !!mintPaused}
            className="rounded-xl px-4 py-2 bg-black text-white disabled:opacity-50"
          >
            {isPending ? "Minting..." : "Mint"}
          </button>

          {!isConnected && <div className="mt-2 text-sm text-orange-600">–ü–æ–¥–∫–ª—é—á–∏ –∫–æ—à–µ–ª—ë–∫ (Hardhat 31337)</div>}
          {!!mintPaused && <div className="mt-2 text-sm text-red-600">–ú–∏–Ω—Ç –Ω–∞ –ø–∞—É–∑–µ</div>}
        </div>

        {/* CARD: Pause / Unpause / Set Price */}
        <div className="rounded-2xl shadow p-5 bg-white/70">
          <h2 className="text-xl font-semibold mb-3">Admin</h2>
          <div className="flex flex-wrap gap-3">
            <button
              onClick={() => onPause(true)}
              className="rounded-xl px-4 py-2 bg-red-600 text-white"
            >
              Pause
            </button>
            <button
              onClick={() => onPause(false)}
              className="rounded-xl px-4 py-2 bg-emerald-600 text-white"
            >
              Unpause
            </button>

            <button
              onClick={() => onSetPrice("0.01")}
              className="rounded-xl px-4 py-2 bg-slate-800 text-white"
            >
              Set price = 0.01 ETH
            </button>
          </div>

          <p className="mt-3 text-sm opacity-80">
            –≠—Ç–∏ –∫–Ω–æ–ø–∫–∏ —Ç—Ä–µ–±—É—é—Ç –ø—Ä–∞–≤ –≤–ª–∞–¥–µ–ª—å—Ü–∞ –∫–æ–Ω—Ç—Ä–∞–∫—Ç–∞ (—Ç–≤–æ–π –ø–µ—Ä–≤—ã–π hardhat-–∞–∫–∫–∞—É–Ω—Ç, –∫–æ—Ç–æ—Ä—ã–π –¥–µ–ø–ª–æ–∏–ª –∫–æ–Ω—Ç—Ä–∞–∫—Ç).
          </p>
        </div>

        {/* CARD: –ü—Ä–∏–º–µ—Ä –∫–∞—Ä—Ç–æ—á–∫–∏ —Ç–æ–∫–µ–Ω–∞ #1 */}
        <div className="rounded-2xl shadow p-5 bg-white/70">
          <h2 className="text-xl font-semibold mb-3">Token #1</h2>
          <p className="text-sm opacity-80 mb-3">–ü—Ä–∏–º–µ—Ä –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è –∫–∞—Ä—Ç–æ—á–∫–∏ (–µ—Å–ª–∏ #1 —Å—É—â–µ—Å—Ç–≤—É–µ—Ç).</p>
          {/* –£–ø—Ä–æ—â—ë–Ω–Ω—ã–π –ø–æ–∫–∞–∑ ‚Äî –∫–∞–∫ –±—ã–ª–æ —Ä–∞–Ω—å—à–µ: if ipfs:// ‚Äî –∑–∞–º–µ–Ω—è–µ–º –Ω–∞ –ø—É–±–ª–∏—á–Ω—ã–π —à–ª—é–∑ */}
          {/* –í —Ä–µ–∞–ª—å–Ω–æ–º –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–∏ –ø–æ–¥—Ç—è–≥–∏–≤–∞–π URI –∏–∑ —Å–æ–±—ã—Ç–∏—è Transfer –∏–ª–∏ –∏–∑ –æ—Ñ—Ñ—á–µ–π–Ω-—Å–ø–∏—Å–∫–∞ */}
          <div className="rounded-xl border p-4">
            <img
              src={"/nft-demo.png"}
              alt="NFT Image"
              className="rounded-lg w-full h-auto object-contain"
            />
          </div>
        </div>
      </div>

      <footer className="opacity-60 text-sm mt-8">
        {isConnected ? `Connected: ${address}` : "Wallet not connected"}
      </footer>
    </main>
  );
}
